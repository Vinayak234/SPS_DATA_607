filter(trimws(clean_rawData$`must language`)!='')%>%
# Group by the responses to the question
group_by(`must language`) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
clean_rawData_Neccecery_Language
clean_rawData_helpful <- clean_rawData %>%
select(Blogs:Textbooks)
clean_rawData_helpful
#clean_rawData_helpful$id <- seq.int(nrow(clean_rawData_helpful))
#clean_rawData_helpful <- gather(clean_rawData_helpful, platforms, How.useful,Blogs:Textbooks) %>%
#  arrange(id) %>%
# group_by(platforms) %>%
#  filter(How.useful!='NA')
clean_rawData_helpful<- na.omit(clean_rawData_helpful)
clean_rawData_helpful
summary(clean_rawData_helpful)
clean_rawData_helpful$Blogs <- as.factor(clean_rawData_helpful$Blogs)
clean_rawData_helpful$College <- as.factor(clean_rawData_helpful$College)
clean_rawData_helpful$Projects <- as.factor(clean_rawData_helpful$Projects)
clean_rawData_helpful$`Online Course` <- as.factor(clean_rawData_helpful$`Online Course`)
clean_rawData_helpful$Friends <- as.factor(clean_rawData_helpful$Friends)
clean_rawData_helpful$`Co-workers` <- as.factor(clean_rawData_helpful$`Co-workers`)
clean_rawData_helpful$Youtube <- as.factor(clean_rawData_helpful$Youtube)
clean_rawData_helpful$Textbooks <- as.factor(clean_rawData_helpful$Textbooks)
# Realize the plot
l28 <- likert(clean_rawData_helpful)
summary(l28)
plot(l28)
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
Techdata<- na.omit(Techdata)
Techdata
summary(Techdata)
Techdata[] <- lapply( Techdata, factor)
Techdata
summary(Techdata)
Techdata[ , 1:18]  <- lapply(Techdata[ , 1:18] ,
FUN = function(x) recode(x, "'Nice to have' =1;'Necessary'=2; else = 0"))
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
Techdata<- na.omit(Techdata)
Techdata
summary(Techdata)
Techdata[] <- lapply( Techdata, factor)
Techdata
summary(Techdata)
Techdata[ , 1:18]  <- lapply(Techdata[ , 1:18],
FUN = function(x) recode(x,"'Nice to have' =1;'Necessary'=2; 'Unnecessary' = 0"))
Techdata
Techdata
knitr::opts_chunk$set(echo = TRUE)
if (!require('rvest')) install.packages('rvest')
if (!require('ggplot2')) install.packages('ggplot2')
if (!require('car')) install.packages('car')
if (!require('RCurl')) install.packages('RCurl')
if (!require('rlist')) install.packages('rlist')
if (!require('magrittr')) install.packages('magrittr')
if (!require('tidyverse')) install.packages('tidyverse')
if (!require('RJSONIO')) install.packages('RJSONIO')
if (!require('DT')) install.packages('DT')
if (!require('likert')) install.packages('likert')
# Import survey data
rawData <- read.csv("https://raw.githubusercontent.com/Vinayak234/SPS_DATA_607/master/SPS_DATA_607/Project_3/To%20find%20Most%20Valued%20Data%20Science%20Skills.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c("", "NA"))
rawData
# Dropping none IT professionals records
clean_rawData<- rawData[!grepl("No", rawData$Are.you.related.to.IT.Profession.),]
#Drop column not needed
drops_c <- c("Timestamp","Are.you.related.to.IT.Profession.")
clean_rawData<-clean_rawData[ , !(names(clean_rawData) %in% drops_c)]
head(clean_rawData)
#Short name for column name
Short_name <- c("Gender","Country","Age","Are you in School","Eduction","Major","Are you learning data science skill","Emplyment Status","Title","Experience","Blogs","College","Projects", "Online Course", "Friends","Co-workers","Youtube","Textbooks","First language","must language","Amazon Machine Learning","Big Data","College Degree","Data Visualizations","Enterprise Tools","Google Cloud","Hadoop/Hive/Pig","IBM SPSS","Java","Microsoft Excel","NoSQL","Oracle Data Mining","Python","R","Relational data","SAS","SQL","Tableau",
"Intellectual curiosity","Business acumen", "Communication skills","Teamwork","Collaboration","Creative Thinking","Problem Solving", "Active Learning","Perceptiveness","Interpersonal Skills","Generating Hypotheses")
colnames(clean_rawData) <- Short_name
head(clean_rawData)
#VIEW THE DATA AND CREATE NAMES
summary(clean_rawData)
#to see how many of the participants were male or female by their age
DataGender <- clean_rawData%>%
select(Gender, Age) %>%
filter(trimws(clean_rawData$Country)!='',Age!='NA') %>%
group_by(Age,Gender) %>%
summarise(count=n()) %>%
arrange(desc(count))
DataGender
# Plot
ggplot(data = DataGender,
mapping = aes(x = Age, fill = Gender,
y = ifelse(test = Gender == "Female",
yes = -count, no = count)))+
geom_bar(stat = "identity") +
scale_y_continuous(labels = abs) +
labs(y="Count")
DemoGraphicsData <- clean_rawData %>%
group_by(Country)%>% # Group by country
summarise(count=n()) %>%# Count how many respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
arrange(desc(count))# Arrange the counts in descending order
DemoGraphicsData
#plot graph
DemoGraphicsData[] %>%
arrange(count) %>%
mutate(Country=factor(Country, levels=Country)) %>%
ggplot( aes(x=Country, y=count)) +
geom_segment( aes(xend=Country, yend=0)) +
geom_point( size=2, color="orange") +
coord_flip() + labs(title="plot by Country")+
theme_minimal()
# to findout most recommanded language
clean_rawData_First_Language <- clean_rawData %>%
# Remove any rows where the respondent didn't answer the question
filter(trimws(clean_rawData$`First language`)!='')%>%
# Group by the responses to the question
group_by(`First language`) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
clean_rawData_First_Language
# to findout have to learn language
clean_rawData_Neccecery_Language <- clean_rawData %>%
# Remove any rows where the respondent didn't answer the question
filter(trimws(clean_rawData$`must language`)!='')%>%
# Group by the responses to the question
group_by(`must language`) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
clean_rawData_Neccecery_Language
clean_rawData_helpful <- clean_rawData %>%
select(Blogs:Textbooks)
clean_rawData_helpful
#clean_rawData_helpful$id <- seq.int(nrow(clean_rawData_helpful))
#clean_rawData_helpful <- gather(clean_rawData_helpful, platforms, How.useful,Blogs:Textbooks) %>%
#  arrange(id) %>%
# group_by(platforms) %>%
#  filter(How.useful!='NA')
clean_rawData_helpful<- na.omit(clean_rawData_helpful)
clean_rawData_helpful
summary(clean_rawData_helpful)
clean_rawData_helpful$Blogs <- as.factor(clean_rawData_helpful$Blogs)
clean_rawData_helpful$College <- as.factor(clean_rawData_helpful$College)
clean_rawData_helpful$Projects <- as.factor(clean_rawData_helpful$Projects)
clean_rawData_helpful$`Online Course` <- as.factor(clean_rawData_helpful$`Online Course`)
clean_rawData_helpful$Friends <- as.factor(clean_rawData_helpful$Friends)
clean_rawData_helpful$`Co-workers` <- as.factor(clean_rawData_helpful$`Co-workers`)
clean_rawData_helpful$Youtube <- as.factor(clean_rawData_helpful$Youtube)
clean_rawData_helpful$Textbooks <- as.factor(clean_rawData_helpful$Textbooks)
# Realize the plot
l28 <- likert(clean_rawData_helpful)
summary(l28)
plot(l28)
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
Techdata<- na.omit(Techdata)
Techdata
summary(Techdata)
Techdata[] <- lapply( Techdata, factor)
Techdata
summary(Techdata)
Techdata[ , 1:18]  <- lapply(Techdata[ ,1:18],
FUN = function(x) recode(x,"'Nice to have' =1;'Necessary'=2; 'Unnecessary' = 0"))
Techdata
temp1 <- names(Techdata)
temp2<- list(colSums(Techdata))
library(car)
library(car)
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
Techdata<- na.omit(Techdata)
Techdata
summary(Techdata)
Techdata[] <- lapply(Techdata, factor)
Techdata
summary(Techdata)
Techdata[ , 1:18]  <- lapply(Techdata[ ,1:18],
FUN = function(x) recode(x, "'Nice to have' =1;'Necessary'=2; 'Unnecessary' = 0"))
library(car)
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
Techdata<- na.omit(Techdata)
Techdata
summary(Techdata)
Techdata[] <- lapply(Techdata, factor)
Techdata
summary(Techdata)
Techdata[ , 1:18]  <- lapply(Techdata[ ,1:18]
FUN = function(x) recode(x, "'Nice to have' =1;'Necessary'=2; 'Unnecessary' = 0"))
library(car)
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
Techdata<- na.omit(Techdata)
Techdata
summary(Techdata)
Techdata[] <- lapply(Techdata, factor)
Techdata
summary(Techdata)
Techdata[ , 1:18]  <- lapply(Techdata[ ,1:18],
FUN = function(x) recode(x, "'Nice to have' =1;'Necessary'=2; 'Unnecessary' = 0"))
library(car)
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
Techdata<- na.omit(Techdata)
Techdata
summary(Techdata)
Techdata[] <- lapply(Techdata, factor)
Techdata
summary(Techdata)
Techdata[ , 1:18]  <- lapply(Techdata[ ,1:18],
FUN = function(x) recode(x, "'Nice to have' =1 ;'Necessary'=2 ; 'Unnecessary' = 0"))
install.packages(c("devtools", "dplyr", "tidyselect"))
install.packages(c("devtools", "dplyr", "tidyselect"))
install.packages(c("devtools", "dplyr", "tidyselect"))
knitr::opts_chunk$set(echo = TRUE)
library(car)
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
knitr::opts_chunk$set(echo = TRUE)
if (!require('rvest')) install.packages('rvest')
if (!require('ggplot2')) install.packages('ggplot2')
if (!require('car')) install.packages('car')
if (!require('RCurl')) install.packages('RCurl')
if (!require('rlist')) install.packages('rlist')
if (!require('magrittr')) install.packages('magrittr')
if (!require('tidyverse')) install.packages('tidyverse')
if (!require('RJSONIO')) install.packages('RJSONIO')
if (!require('DT')) install.packages('DT')
if (!require('likert')) install.packages('likert')
# Import survey data
rawData <- read.csv("https://raw.githubusercontent.com/Vinayak234/SPS_DATA_607/master/SPS_DATA_607/Project_3/To%20find%20Most%20Valued%20Data%20Science%20Skills.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c("", "NA"))
rawData
# Dropping none IT professionals records
clean_rawData<- rawData[!grepl("No", rawData$Are.you.related.to.IT.Profession.),]
#Drop column not needed
drops_c <- c("Timestamp","Are.you.related.to.IT.Profession.")
clean_rawData<-clean_rawData[ , !(names(clean_rawData) %in% drops_c)]
head(clean_rawData)
#Short name for column name
Short_name <- c("Gender","Country","Age","Are you in School","Eduction","Major","Are you learning data science skill","Emplyment Status","Title","Experience","Blogs","College","Projects", "Online Course", "Friends","Co-workers","Youtube","Textbooks","First language","must language","Amazon Machine Learning","Big Data","College Degree","Data Visualizations","Enterprise Tools","Google Cloud","Hadoop/Hive/Pig","IBM SPSS","Java","Microsoft Excel","NoSQL","Oracle Data Mining","Python","R","Relational data","SAS","SQL","Tableau",
"Intellectual curiosity","Business acumen", "Communication skills","Teamwork","Collaboration","Creative Thinking","Problem Solving", "Active Learning","Perceptiveness","Interpersonal Skills","Generating Hypotheses")
colnames(clean_rawData) <- Short_name
head(clean_rawData)
#VIEW THE DATA AND CREATE NAMES
summary(clean_rawData)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
if (!require('rvest')) install.packages('rvest')
if (!require('ggplot2')) install.packages('ggplot2')
if (!require('car')) install.packages('car')
if (!require('RCurl')) install.packages('RCurl')
if (!require('rlist')) install.packages('rlist')
if (!require('magrittr')) install.packages('magrittr')
if (!require('tidyverse')) install.packages('tidyverse')
if (!require('RJSONIO')) install.packages('RJSONIO')
if (!require('DT')) install.packages('DT')
if (!require('likert')) install.packages('likert')
# Import survey data
rawData <- read.csv("https://raw.githubusercontent.com/Vinayak234/SPS_DATA_607/master/SPS_DATA_607/Project_3/To%20find%20Most%20Valued%20Data%20Science%20Skills.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c("", "NA"))
rawData
# Dropping none IT professionals records
clean_rawData<- rawData[!grepl("No", rawData$Are.you.related.to.IT.Profession.),]
#Drop column not needed
drops_c <- c("Timestamp","Are.you.related.to.IT.Profession.")
clean_rawData<-clean_rawData[ , !(names(clean_rawData) %in% drops_c)]
head(clean_rawData)
#Short name for column name
Short_name <- c("Gender","Country","Age","Are you in School","Eduction","Major","Are you learning data science skill","Emplyment Status","Title","Experience","Blogs","College","Projects", "Online Course", "Friends","Co-workers","Youtube","Textbooks","First language","must language","Amazon Machine Learning","Big Data","College Degree","Data Visualizations","Enterprise Tools","Google Cloud","Hadoop/Hive/Pig","IBM SPSS","Java","Microsoft Excel","NoSQL","Oracle Data Mining","Python","R","Relational data","SAS","SQL","Tableau",
"Intellectual curiosity","Business acumen", "Communication skills","Teamwork","Collaboration","Creative Thinking","Problem Solving", "Active Learning","Perceptiveness","Interpersonal Skills","Generating Hypotheses")
colnames(clean_rawData) <- Short_name
head(clean_rawData)
#VIEW THE DATA AND CREATE NAMES
summary(clean_rawData)
#to see how many of the participants were male or female by their age
DataGender <- clean_rawData%>%
select(Gender, Age) %>%
filter(trimws(clean_rawData$Country)!='',Age!='NA') %>%
group_by(Age,Gender) %>%
summarise(count=n()) %>%
arrange(desc(count))
DataGender
# Plot
ggplot(data = DataGender,
mapping = aes(x = Age, fill = Gender,
y = ifelse(test = Gender == "Female",
yes = -count, no = count)))+
geom_bar(stat = "identity") +
scale_y_continuous(labels = abs) +
labs(y="Count")
DemoGraphicsData <- clean_rawData %>%
group_by(Country)%>% # Group by country
summarise(count=n()) %>%# Count how many respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
arrange(desc(count))# Arrange the counts in descending order
DemoGraphicsData
#plot graph
DemoGraphicsData[] %>%
arrange(count) %>%
mutate(Country=factor(Country, levels=Country)) %>%
ggplot( aes(x=Country, y=count)) +
geom_segment( aes(xend=Country, yend=0)) +
geom_point( size=2, color="orange") +
coord_flip() + labs(title="plot by Country")+
theme_minimal()
# to findout most recommanded language
clean_rawData_First_Language <- clean_rawData %>%
# Remove any rows where the respondent didn't answer the question
filter(trimws(clean_rawData$`First language`)!='')%>%
# Group by the responses to the question
group_by(`First language`) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
clean_rawData_First_Language
# to findout have to learn language
clean_rawData_Neccecery_Language <- clean_rawData %>%
# Remove any rows where the respondent didn't answer the question
filter(trimws(clean_rawData$`must language`)!='')%>%
# Group by the responses to the question
group_by(`must language`) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
clean_rawData_Neccecery_Language
clean_rawData_helpful <- clean_rawData %>%
select(Blogs:Textbooks)
clean_rawData_helpful
#clean_rawData_helpful$id <- seq.int(nrow(clean_rawData_helpful))
#clean_rawData_helpful <- gather(clean_rawData_helpful, platforms, How.useful,Blogs:Textbooks) %>%
#  arrange(id) %>%
# group_by(platforms) %>%
#  filter(How.useful!='NA')
clean_rawData_helpful<- na.omit(clean_rawData_helpful)
clean_rawData_helpful
summary(clean_rawData_helpful)
clean_rawData_helpful$Blogs <- as.factor(clean_rawData_helpful$Blogs)
clean_rawData_helpful$College <- as.factor(clean_rawData_helpful$College)
clean_rawData_helpful$Projects <- as.factor(clean_rawData_helpful$Projects)
clean_rawData_helpful$`Online Course` <- as.factor(clean_rawData_helpful$`Online Course`)
clean_rawData_helpful$Friends <- as.factor(clean_rawData_helpful$Friends)
clean_rawData_helpful$`Co-workers` <- as.factor(clean_rawData_helpful$`Co-workers`)
clean_rawData_helpful$Youtube <- as.factor(clean_rawData_helpful$Youtube)
clean_rawData_helpful$Textbooks <- as.factor(clean_rawData_helpful$Textbooks)
# Realize the plot
l28 <- likert(clean_rawData_helpful)
summary(l28)
plot(l28)
library(car)
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
Techdata<- na.omit(Techdata)
Techdata
summary(Techdata)
Techdata[] <- lapply(Techdata, factor)
Techdata
summary(Techdata)
Techdata[ , 1:18]  <- lapply(Techdata[ ,1:18],
FUN = function(x) recode(x, "'Nice to have' =1 ;'Necessary'=2 ; 'Unnecessary' = 0";))
library(car)
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
Techdata<- na.omit(Techdata)
Techdata
summary(Techdata)
Techdata[] <- lapply(Techdata, factor)
Techdata
summary(Techdata)
Techdata[ , 1:18]  <- lapply(Techdata[ ,1:18],
FUN = function(x) recode(x, "'Nice to have' =1 ;'Necessary'=2 ; 'Unnecessary' = 0"))
Techdata[ ,1:18]  <- lapply(Techdata[ ,1:18],
FUN = function(x) recode(x, "'Nice to have' =1 ;'Necessary'=2 ;'Unnecessary' = 0"))
levels(Techdata)
levels(Techdata$`Amazon Machine Learning`)
levels(Techdata[2])
levels(Techdata[[2])
levels(Techdata[[2]])
summary(Techdata$`Data Visualizations`)
summary(Techdata[[1:18]])
summary(Techdata[[18]])
Techdata <- clean_rawData %>%
select(`Amazon Machine Learning`:Tableau)
Techdata
Techdata<- na.omit(Techdata)
Techdata
Techdata[ ,1:18]  <- lapply(Techdata[ ,1:18],
FUN = function(x) recode(x, "'Nice to have' =1 ;'Necessary'=2 ;'Unnecessary' = 0"))
Techdata[ ,1:18]  <- lapply(Techdata[ ,1:18],
FUN = function(x) Recode(x, "'Nice to have' =1 ;'Necessary'=2 ;'Unnecessary' = 0"))
Techdata
knitr::opts_chunk$set(echo = TRUE)
if (!require('rvest')) install.packages('rvest')
if (!require('ggplot2')) install.packages('ggplot2')
if (!require('car')) install.packages('car')
if (!require('RCurl')) install.packages('RCurl')
if (!require('rlist')) install.packages('rlist')
if (!require('magrittr')) install.packages('magrittr')
if (!require('tidyverse')) install.packages('tidyverse')
if (!require('RJSONIO')) install.packages('RJSONIO')
if (!require('DT')) install.packages('DT')
if (!require('likert')) install.packages('likert')
# Import survey data
rawData <- read.csv("https://raw.githubusercontent.com/Vinayak234/SPS_DATA_607/master/SPS_DATA_607/Project_3/To%20find%20Most%20Valued%20Data%20Science%20Skills.csv", stringsAsFactors = FALSE, header = TRUE, na.strings = c("", "NA"))
rawData
# Dropping none IT professionals records
clean_rawData<- rawData[!grepl("No", rawData$Are.you.related.to.IT.Profession.),]
#Drop column not needed
drops_c <- c("Timestamp","Are.you.related.to.IT.Profession.")
clean_rawData<-clean_rawData[ , !(names(clean_rawData) %in% drops_c)]
head(clean_rawData)
#Short name for column name
Short_name <- c("Gender","Country","Age","Are you in School","Eduction","Major","Are you learning data science skill","Emplyment Status","Title","Experience","Blogs","College","Projects", "Online Course", "Friends","Co-workers","Youtube","Textbooks","First language","must language","Amazon Machine Learning","Big Data","College Degree","Data Visualizations","Enterprise Tools","Google Cloud","Hadoop/Hive/Pig","IBM SPSS","Java","Microsoft Excel","NoSQL","Oracle Data Mining","Python","R","Relational data","SAS","SQL","Tableau",
"Intellectual curiosity","Business acumen", "Communication skills","Teamwork","Collaboration","Creative Thinking","Problem Solving", "Active Learning","Perceptiveness","Interpersonal Skills","Generating Hypotheses")
colnames(clean_rawData) <- Short_name
head(clean_rawData)
#VIEW THE DATA AND CREATE NAMES
summary(clean_rawData)
#to see how many of the participants were male or female by their age
DataGender <- clean_rawData%>%
select(Gender, Age) %>%
filter(trimws(clean_rawData$Country)!='',Age!='NA') %>%
group_by(Age,Gender) %>%
summarise(count=n()) %>%
arrange(desc(count))
DataGender
# Plot
ggplot(data = DataGender,
mapping = aes(x = Age, fill = Gender,
y = ifelse(test = Gender == "Female",
yes = -count, no = count)))+
geom_bar(stat = "identity") +
scale_y_continuous(labels = abs) +
labs(y="Count")
DemoGraphicsData <- clean_rawData %>%
group_by(Country)%>% # Group by country
summarise(count=n()) %>%# Count how many respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
arrange(desc(count))# Arrange the counts in descending order
DemoGraphicsData
#plot graph
DemoGraphicsData[] %>%
arrange(count) %>%
mutate(Country=factor(Country, levels=Country)) %>%
ggplot( aes(x=Country, y=count)) +
geom_segment( aes(xend=Country, yend=0)) +
geom_point( size=2, color="orange") +
coord_flip() + labs(title="plot by Country")+
theme_minimal()
# to findout most recommanded language
clean_rawData_First_Language <- clean_rawData %>%
# Remove any rows where the respondent didn't answer the question
filter(trimws(clean_rawData$`First language`)!='')%>%
# Group by the responses to the question
group_by(`First language`) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
clean_rawData_First_Language
# to findout have to learn language
clean_rawData_Neccecery_Language <- clean_rawData %>%
# Remove any rows where the respondent didn't answer the question
filter(trimws(clean_rawData$`must language`)!='')%>%
# Group by the responses to the question
group_by(`must language`) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
clean_rawData_Neccecery_Language
clean_rawData_helpful <- clean_rawData %>%
select(Blogs:Textbooks)
clean_rawData_helpful
#clean_rawData_helpful$id <- seq.int(nrow(clean_rawData_helpful))
#clean_rawData_helpful <- gather(clean_rawData_helpful, platforms, How.useful,Blogs:Textbooks) %>%
#  arrange(id) %>%
# group_by(platforms) %>%
#  filter(How.useful!='NA')
clean_rawData_helpful<- na.omit(clean_rawData_helpful)
clean_rawData_helpful
summary(clean_rawData_helpful)
clean_rawData_helpful$Blogs <- as.factor(clean_rawData_helpful$Blogs)
clean_rawData_helpful$College <- as.factor(clean_rawData_helpful$College)
clean_rawData_helpful$Projects <- as.factor(clean_rawData_helpful$Projects)
clean_rawData_helpful$`Online Course` <- as.factor(clean_rawData_helpful$`Online Course`)
clean_rawData_helpful$Friends <- as.factor(clean_rawData_helpful$Friends)
clean_rawData_helpful$`Co-workers` <- as.factor(clean_rawData_helpful$`Co-workers`)
clean_rawData_helpful$Youtube <- as.factor(clean_rawData_helpful$Youtube)
clean_rawData_helpful$Textbooks <- as.factor(clean_rawData_helpful$Textbooks)
# Realize the plot
l28 <- likert(clean_rawData_helpful)
summary(l28)
plot(l28)
View(clean_rawData_helpful)
